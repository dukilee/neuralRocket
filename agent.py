import math
import random

class Agent:
	def __init__(self):
		self.numberOfInputs = 6
		self.numberInMiddle = 10
		self.genes = []
		self.fitness = 0
		for i in range(self.numberInMiddle*(self.numberOfInputs+2)):
			self.genes.append(self.randomGene())

		self.genes = [0.8724334873001842, -0.5004760773478534, 3.2662861441139652, 2.3994530325185455, -3.4336970061283703, 1.7573343247319873, 3.3192472206242183, -1.9009572111603807, -1.21877197829809, -1.9850063081734222, -0.5962231278545254, 0.4293811629879851, -1.692154021016326, -2.2221647122405823, -0.7260427484387453, -1.4401196730315773, -1.6365002169598535, -1.09120710153708, -2.2059705090369164, 0.8727773529868141, 1.728756495887418, -2.2830707785058397, -2.354248250767032, 3.209462212683536, 2.843949617066225, 3.7628367013068944, 3.425489947106275, -0.5060281605407422, -0.10433413825647442, 1.1028931608821217, 1.614048610874537, -3.743171680548344, 3.0696299912780516, 0.9440462187237912, -1.4766960981453385, -2.4231648776655392, -1.3564915965316873, 0.6849632898217974, -3.0479825760449017, -3.3445991493105316, -3.553156316433995, -1.5525034082301543, -3.0112950834574246, 3.3974115772575173, -3.4559038874779393, 0.2784735110296612, -0.5746726464799785, -2.732635641934806, 0.7082763160564074, 0.10527287898747062, 1.7256886459485106, -1.3578959345568258, -1.1238936755412414, -2.228144985245038, -1.371920352713654, -1.9335276611239305, -1.7364357608931593, -0.768703449751623, -1.2399831224035127, -2.8128794149503697, 3.7137157039455744, 0.3237833029601829, -0.5213421595281114, 2.7013221144781907, 3.9723940195591636, -0.7574765021126577, 3.999959488558061, -1.46405954316974, 1.8931711922704562, -3.773833765138771, -0.28300762944138125, 2.9421228763364526, -2.674453042935135, -3.1851269987584203, -1.156392282566693, -2.5618771213119462, 1.7140182736937266, 3.769204256734307, -0.9889871025986663, 0.161701228619326]


	
	def randomGene(self):
		return random.uniform(-4, 4)

	def sigmoid(self, x):
		return 1/(1+math.exp(-x))

	def inner(self, a, b):
		if(len(a) != len(b)):
			print(a, b, self.genes)
			print("Lengths are different");
			return 0
		ans = 0
		for i in range(len(a)):
			ans += a[i]*b[i]
		return self.sigmoid(ans)

	def inner2(self, a, b):
		if(len(a) != len(b)):
			print(a, b, self.genes)
			print("Lengths are different");
			return 0
		ans = 0
		for i in range(len(a)):
			ans += a[i]*b[i]
		if ans<0:
			return 0
		return ans



	def decide(self,  x, y, angle, v, w):
		goalY = 5;

		inp = [x, goalY-y, angle - math.pi*0.5, v.x, v.y, w]

		middle = []
		sz = len(inp)
		aux = 0
		for i in range(self.numberInMiddle):
			middle.append(self.inner2(
				inp,
				self.genes[aux:(aux+sz)]))
			aux += sz


		sz = self.numberInMiddle
		output = []
		for i in range(2):
			output.append(self.inner(
				middle,
				self.genes[aux:(aux+sz)]))
			aux += sz


		return output
		
